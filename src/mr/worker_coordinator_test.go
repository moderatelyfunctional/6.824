package mr

import "testing"

import "time"

import "strings"
import "strconv"
import "unicode"

//
// The map function is called once for each file of input. The first
// argument is the name of the input file, and the second is the
// file's complete contents. You should ignore the input file name,
// and look only at the contents argument. The return value is a slice
// of key/value pairs.
//
func Map(filename string, contents string) []KeyValue {
	// function to detect word separators.
	ff := func(r rune) bool { return !unicode.IsLetter(r) }

	// split contents into an array of words.
	words := strings.FieldsFunc(contents, ff)

	kva := []KeyValue{}
	for _, w := range words {
		kv := KeyValue{w, "1"}
		kva = append(kva, kv)
	}
	return kva
}

//
// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
//
func Reduce(key string, values []string) string {
	// return the number of occurrences of this word.
	return strconv.Itoa(len(values))
}

func TestWorkerCoordinatorCompletesMapTask(t *testing.T) {
	setup()
	expectedIntermediateFilenames := []string{
		"../main/mr-0-0",
		"../main/mr-0-1",
	}
	t.Run(simpleTestInput.name(), func(t *testing.T) {
		c := MakeCoordinator(simpleTestInput.files, simpleTestInput.nReduce)
		done := make(chan bool)
		go func() {
			Worker(Map, Reduce)
			done<-true
		}()
		for {
			if c.state == COORDINATOR_REDUCE {
				break
			}
			time.Sleep(500 * time.Millisecond)
		}
		c.Stop()
		<-done
		checkFilesExist(expectedIntermediateFilenames)
		removeFiles(expectedIntermediateFilenames)
	})
}

func TestWorkerCoordinatorOneWorkerCompletesMapAndReduceTask(t *testing.T) {
	setup()
	expectedIntermediateFilenames := []string{
		"../main/mr-0-0",
		"../main/mr-0-1",
	}
	expectedOutputFilenames := []string{
		"../main/mr-out-0",
		"../main/mr-out-1",
	}
	t.Run(simpleTestInput.name(), func(t *testing.T) {
		MakeCoordinator(simpleTestInput.files, simpleTestInput.nReduce)
		done := make(chan bool)
		go func() {
			Worker(Map, Reduce)
			done<-true
		}()
		<-done
		checkFilesExist(expectedIntermediateFilenames)
		removeFiles(expectedIntermediateFilenames)
		checkFilesExist(expectedOutputFilenames)
		removeFiles(expectedOutputFilenames)
	})
}

func TestWorkerCoordinatorTwoWorkersCompletesMapAndReduceTask(t *testing.T) {
	setup()
	expectedIntermediateFilenames := []string{
		"../main/mr-0-0",
		"../main/mr-0-1",
		"../main/mr-0-2",
		"../main/mr-1-0",
		"../main/mr-1-1",
		"../main/mr-1-2",
	}
	expectedOutputFilenames := []string{
		"../main/mr-out-0",
		"../main/mr-out-1",
		"../main/mr-out-2",
	}
	t.Run(complexTestInput.name(), func(t *testing.T) {
		MakeCoordinator(complexTestInput.files, complexTestInput.nReduce)
		doneOne := make(chan bool)
		doneTwo := make(chan bool)
		go func() {
			Worker(Map, Reduce)
			doneOne<-true
		}()
		go func() {
			Worker(Map, Reduce)
			doneTwo<-true
		}()
		<-doneOne
		<-doneTwo
		checkFilesExist(expectedIntermediateFilenames)
		removeFiles(expectedIntermediateFilenames)
		checkFilesExist(expectedOutputFilenames)
		removeFiles(expectedOutputFilenames)
	})
}







